apply plugin: 'com.android.library'
//添加这两行
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 28
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }


    //支持java8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    //RxAndroid
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    //RxJava2
    implementation 'io.reactivex.rxjava2:rxjava:2.2.12'
    implementation 'com.squareup.retrofit2:converter-scalars:2.3.0'
    //Retrofit2的RxJava适配
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    //Retrofit2
    implementation 'com.squareup.retrofit2:retrofit:2.6.1'
    //网络日志拦截
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    //facebook登录
    implementation 'com.facebook.android:facebook-login:5.1.0'
    implementation 'com.google.android.gms:play-services-auth:16.0.0'
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'android.arch.lifecycle:runtime:1.1.1'
    implementation 'android.arch.lifecycle:compiler:1.1.1'
    // Adds libraries defining annotations to only the compile classpath.
    compileOnly 'android.arch.lifecycle:extensions:1.1.1'
    // Adds the annotation processor dependency to the annotation processor classpath.
    annotationProcessor 'android.arch.lifecycle:compiler:1.1.1'
    implementation files('libs/open_sdk_r6019_lite.jar')
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    //fragment
    implementation 'me.yokeyword:fragmentation:1.3.6'
    implementation 'me.yokeyword:fragmentation-swipeback:1.3.6'
    //微信
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.1.6'
    // 支付宝
    implementation (name: 'alipaySdk-15.7.4-20200228192259', ext: 'aar')
}

//项目主页
def siteUrl = 'https://github.com/muyishuangfeng/LTGameSDKAndroidJcenter'
//项目的git地址
def gitUrl = 'https://github.com/muyishuangfeng/LTGameSDKAndroidJcenter.git'
//发布到JCenter上的项目名字
def libName = "LTGameSDKAndroid"

//发布到组织名称名字，必须填写
group = "leitui.appcpi.LTGameSDKAndroid"
// 版本号，下次更新是只需要更改版本号即可
version = "1.0.0"
//上面配置后上传至JCenter后的编译路径是这样的： compile 'me.songning.CircleView:library:1.0.0'

//生成源文件
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//生成Javadoc文档
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

//文档打包成jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//拷贝javadoc文件
task copyDoc(type: Copy) {
    from "${buildDir}/docs/"
    into "docs"
}

//上传到JCenter所需要的源码文件
artifacts {
    archives javadocJar
    archives sourcesJar
}

// 配置maven库，生成POM.xml文件
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                //项目描述，随意填
                name 'letui Sdk'
                url siteUrl
                licenses {
                    license {
                        //开源协议
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        //开发者的个人信息
                        id 'muyishuangfeng'
                        name 'Silence潇湘夜雨'
                        email 'yangkemuyi@sina.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

//上传到JCenter
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")    //读取 local.properties 文件里面的 bintray.user
    key = properties.getProperty("bintray.apikey")   //读取 local.properties 文件里面的 bintray.apikey
    configurations = ['archives']
    pkg {
        //这里的repo值必须要和你创建Maven仓库的时候的名字一样
        repo = "maven"
        //发布到JCenter上的项目名字
        name = libName
        //项目描述
        desc = 'letui Sdk'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

javadoc {
    options{
        //如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}